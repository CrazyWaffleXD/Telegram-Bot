import telebot
from telebot import types
import sqlite3
from datetime import datetime
import logging
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '8094895160:AAGzj1vzPOWgs502sAcqC1ZP51_Y-3arv0s'
bot = telebot.TeleBot(TOKEN)
ADMIN_IDS = [5672359649, 1604969937]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('tasks.db', check_same_thread=False)
cursor = conn.cursor()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_BUTTONS_PER_PAGE = 8
PREDEFINED_DISCIPLINES = [
    "–£—á–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –ü–ú.01",
    "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ –ü–ú.01",
    "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
    "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞",
    "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏",
    "–≠–∫–∑–∞–º–µ–Ω –ø–æ –ü–ú.01",
    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π",
    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
    "–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è"
]

class UserState:
    def __init__(self):
        self.states = {}

    def set_state(self, user_id, state, data=None):
        self.states[user_id] = {'state': state, 'data': data or {}}

    def get_state(self, user_id):
        return self.states.get(user_id, {'state': None, 'data': {}})

    def clear_state(self, user_id):
        if user_id in self.states:
            del self.states[user_id]

user_state = UserState()

def initialize_database():
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables = [
            '''CREATE TABLE IF NOT EXISTS users (
               user_id INTEGER PRIMARY KEY,
               username TEXT,
               first_name TEXT,
               last_name TEXT,
               join_date TEXT,
               is_admin INTEGER DEFAULT 0)''',
               
            '''CREATE TABLE IF NOT EXISTS tasks (
               id INTEGER PRIMARY KEY AUTOINCREMENT,
               discipline_id INTEGER,
               name TEXT,
               description TEXT,
               deadline TEXT,
               added_by INTEGER,
               FOREIGN KEY(discipline_id) REFERENCES disciplines(id))''',
                
            '''CREATE TABLE IF NOT EXISTS logs (
               id INTEGER PRIMARY KEY AUTOINCREMENT,
               user_id INTEGER,
               action TEXT,
               timestamp TEXT)''',
                
            '''CREATE TABLE IF NOT EXISTS disciplines (
               id INTEGER PRIMARY KEY AUTOINCREMENT,
               name TEXT UNIQUE)''',
                
            '''CREATE TABLE IF NOT EXISTS solutions (
               id INTEGER PRIMARY KEY AUTOINCREMENT,
               task_id INTEGER,
               text TEXT,
               added_by INTEGER,
               FOREIGN KEY(task_id) REFERENCES tasks(id))''',
                
            '''CREATE TABLE IF NOT EXISTS photos (
               id INTEGER PRIMARY KEY AUTOINCREMENT,
               task_id INTEGER,
               file_id TEXT,
               FOREIGN KEY(task_id) REFERENCES tasks(id))'''
        ]

        for table in tables:
            cursor.execute(table)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü—É users
        cursor.execute("PRAGMA table_info(users)")
        columns = [column[1] for column in cursor.fetchall()]
        
        if 'is_admin' not in columns:
            cursor.execute("ALTER TABLE users ADD COLUMN is_admin INTEGER DEFAULT 0")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
        cursor.execute("SELECT COUNT(*) FROM disciplines")
        count = cursor.fetchone()[0]

        if count == 0:
            for discipline in PREDEFINED_DISCIPLINES:
                try:
                    cursor.execute("INSERT INTO disciplines (name) VALUES (?)", (discipline,))
                except sqlite3.IntegrityError:
                    continue  # –ï—Å–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in ADMIN_IDS:
            cursor.execute("""
                INSERT OR REPLACE INTO users (user_id, is_admin) 
                VALUES (?, 1)
            """, (admin_id,))

        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

def log_action(user_id, action):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        cursor.execute(
            "INSERT INTO logs (user_id, action, timestamp) VALUES (?, ?, ?)",
            (user_id, action, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        )
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {e}")

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        if user_id in ADMIN_IDS:
            return True
        
        cursor.execute("SELECT is_admin FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        return bool(result and result[0])
    except Exception as e:
        logger.error(f"Error in is_admin: {e}")
        return False

def main_menu(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", 
        "üìö –°–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω",
        "üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π",
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
    ]
    
    if is_admin(user_id):
        buttons.append("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    
    markup.add(*[types.KeyboardButton(btn) for btn in buttons])
    return markup

def admin_panel(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏", 
        "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "üìå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏",
        "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏",
        "üì¢ –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
        "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    ]
    markup.add(*[types.KeyboardButton(btn) for btn in buttons])
    return markup

@bot.message_handler(func=lambda message: message.chat.type != 'private')
def handle_non_private_chats(message):
    bot.reply_to(message, "üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—â–∞–π—Ç–µ—Å—å —Å –±–æ—Ç–æ–º –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
    return

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if message.chat.type != 'private':
        return

@bot.message_handler(func=lambda message: message.chat.type != 'private')
def handle_non_private(message):
    bot.reply_to(message, "üîí –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –õ–°.")
    return

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
def private_only(func):
    def wrapped(message):
        if message.chat.type != 'private':
            handle_non_private(message)
            return
        return func(message)
    return wrapped

@bot.message_handler(func=lambda message: message.text == "üì¢ –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
def handle_announcement(message):
    try:
        user_id = message.from_user.id
        if is_admin(user_id):
            msg = bot.send_message(
                user_id,
                "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown):\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "*–í–∞–∂–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!*\n"
                "–ó–∞–≤—Ç—Ä–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã —Å 10:00 –¥–æ 12:00",
                reply_markup=types.ReplyKeyboardRemove(),
                parse_mode="Markdown"
            )
            user_state.set_state(user_id, 'waiting_for_announcement_text')
            bot.register_next_step_handler(msg, confirm_announcement)
        else:
            bot.send_message(user_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
    except Exception as e:
        logger.error(f"Error in handle_announcement: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def confirm_announcement(message):
    try:
        user_id = message.from_user.id
        announcement_text = message.text
        
        if not announcement_text.strip():
            bot.send_message(user_id, "–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return handle_announcement(message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        user_state.set_state(user_id, 'confirming_announcement', {'text': announcement_text})
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="announce_confirm"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="announce_cancel")
        )
        
        bot.send_message(
            user_id,
            f"üì¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n{announcement_text}\n\n"
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
            reply_markup=markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"Error in confirm_announcement: {e}")
        bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.callback_query_handler(func=lambda call: call.data == 'announce_confirm')
def send_announcement(call):
    try:
        user_id = call.from_user.id
        state = user_state.get_state(user_id)
        
        if state.get('state') != 'confirming_announcement':
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
            return
            
        announcement_text = state['data']['text']
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT user_id FROM users")
        users = cursor.fetchall()
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞ –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
        )
        
        success = 0
        failed = 0
        
        for user in users:
            try:
                bot.send_message(
                    user[0],
                    f"üì¢ *–í–∞–∂–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ*\n\n{announcement_text}",
                    parse_mode="Markdown"
                )
                success += 1
                time.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
            except Exception as e:
                logger.error(f"Failed to send to {user[0]}: {e}")
                failed += 1
        
        bot.send_message(
            user_id,
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
            f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}",
            reply_markup=admin_panel(user_id)
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        log_action(user_id, f"–°–¥–µ–ª–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É: {announcement_text[:50]}...")
        
    except Exception as e:
        logger.error(f"Error in send_announcement: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.")

@bot.callback_query_handler(func=lambda call: call.data == 'announce_cancel')
def cancel_announcement(call):
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
        )
        bot.send_message(
            call.from_user.id,
            "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
            reply_markup=admin_panel(call.from_user.id)
        )
    except Exception as e:
        logger.error(f"Error in cancel_announcement: {e}")    
        
@bot.message_handler(content_types=['photo'], func=lambda m: user_state.get_state(m.from_user.id).get('state') == 'waiting_for_announcement_text')
def handle_announcement_photo(message):
    try:
        user_id = message.from_user.id
        file_id = message.photo[-1].file_id
        
        msg = bot.send_message(
            user_id,
            "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        user_state.set_state(
            user_id, 
            'waiting_for_announcement_text_with_photo',
            {'photo': file_id}
        )
        bot.register_next_step_handler(msg, confirm_announcement_with_photo)
    except Exception as e:
        logger.error(f"Error in handle_announcement_photo: {e}")
        bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")  

def confirm_announcement_with_photo(message):
    try:
        user_id = message.from_user.id
        state = user_state.get_state(user_id)
        announcement_text = message.text
        photo_file_id = state['data']['photo']
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"announce_confirm_with_photo:{photo_file_id}"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="announce_cancel")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
        bot.send_photo(
            user_id,
            photo_file_id,
            caption=f"üì¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n{announcement_text}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
            reply_markup=markup
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
        user_state.set_state(
            user_id,
            'confirming_announcement_with_photo',
            {'text': announcement_text, 'photo': photo_file_id}
        )
        
    except Exception as e:
        logger.error(f"Error in confirm_announcement_with_photo: {e}")
        bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    try:
        user_id = message.from_user.id  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ from_user_id –Ω–∞ from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        join_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        cursor.execute("""
            INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, join_date, is_admin)
            VALUES (?, ?, ?, ?, ?, COALESCE((SELECT is_admin FROM users WHERE user_id=?), ?))
            """, 
            (user_id, username, first_name, last_name, join_date, user_id, 1 if user_id in ADMIN_IDS else 0)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ AI –Ω–∞ ADMIN_IDS
        )
        
        conn.commit()
        log_action(user_id, "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ /start")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—á–∞—Ç–∫—É "–±–æ–≥–∞" –Ω–∞ "–±–æ—Ç–∞"

        if message.text == '/start':
            welcome_msg = """
*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –±—É–¥—É—â–∏–π —Å–≤–µ—Ç–∏–ª–æ –Ω–∞—É–∫–∏!* (–∏–ª–∏ —É–∂–µ –º–∞—Å—Ç–µ—Ä –ø—Ä–æ–≥—É–ª–æ–≤? üòä)

üí¨ *–Ø ‚Äì —Ç–≤–æ–π —É—á–µ–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç*, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–º –¥—É—ç—Ç–æ–º:
*–ê–ª–µ–∫—Å–∞–Ω–¥—Ä & –ê—Ä–∫–∞–¥–∏–π*
(–¥–∞-–¥–∞, —Ç–µ —Å–∞–º—ã–µ –≥—É—Ä—É –∫–æ–¥–∞ —Å —Ö–∞—Ä–∏–∑–º–æ–π —Å—É–ø–µ—Ä–≥–µ—Ä–æ–µ–≤!)

üí¨ *–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å:*
‚úÖ –°–ø–∞—Å—Ç–∏ –æ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤ (–Ω—É, —Ö–æ—Ç—è –±—ã –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å)
‚úÖ –ù–∞–π—Ç–∏ –∑–∞–¥–∞–Ω–∏—è (–¥–∞–∂–µ –µ—Å–ª–∏ —Ç—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª... –≤—Å—ë)
‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é (—à–æ–∫–æ–ª–∞–¥–∫—É –Ω–µ –¥–∞–º, –Ω–æ –ø–Ω—É—Ç—å –º–æ–≥—É)

üí¨ *–í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å:*
- –Ø –Ω–µ SkyNet (–ø–æ–∫–∞ —á—Ç–æ)
- –ù–æ —Ç–æ—á–Ω–æ —Ç–≤–æ–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–æ—é–∑–Ω–∏–∫ –≤ —É—á–µ–±–Ω–æ–º —Ö–∞–æ—Å–µ
- –ü—Ä–æ—Å—Ç–æ –∂–º–∏ –∫–Ω–æ–ø–∫–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è

üöÄ *–ù–∞—á–Ω—ë–º?* –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ!
"""
            bot.send_message(
                user_id,
                welcome_msg,
                reply_markup=main_menu(user_id),
                parse_mode="Markdown"
            )
        else:
            help_msg = """
üìö *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*

‚ú® *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üéØ *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
- –î–æ–±–∞–≤–ª—è—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è
- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
- –£–ø—Ä–∞–≤–ª—è—Ç—å —É—á–µ–±–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
"""
            bot.send_message(
                user_id,
                help_msg,
                reply_markup=main_menu(user_id),
                parse_mode="Markdown"
            )

    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ================ –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ================

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
def handle_add_task(message):
    try:
        show_disciplines_for_selection(message)
    except Exception as e:
        logger.error(f"Error in handle_add_task: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: message.text == "üìö –°–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω")
def handle_show_disciplines(message):
    try:
        cursor.execute("SELECT name FROM disciplines ORDER BY name")
        disciplines = [d[0] for d in cursor.fetchall()]

        if not disciplines:
            bot.send_message(message.chat.id, "üì≠ –°–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –ø—É—Å—Ç.", reply_markup=main_menu(message.from_user.id))
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        chunk_size = 30
        for i in range(0, len(disciplines), chunk_size):
            chunk = disciplines[i:i + chunk_size]
            response = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:\n\n" + "\n".join(
                f"{i+1}. {name}" for i, name in enumerate(chunk, start=i)
            )
            
            if len(response) > 4000:
                response = response[:4000] + "\n..."
            
            bot.send_message(
                message.chat.id,
                response,
                reply_markup=main_menu(message.from_user.id)  # –î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é
            )

    except Exception as e:
        logger.error(f"Error in handle_show_disciplines: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.", reply_markup=main_menu(message.from_user.id))

def show_disciplines_for_tasks(message, page=0):
    try:
        user_id = message.from_user.id
        cursor.execute("SELECT id, name FROM disciplines ORDER BY name")
        disciplines = cursor.fetchall()
        
        if not disciplines:
            bot.send_message(user_id, "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.", reply_markup=main_menu(user_id))
            return
        
        total_pages = (len(disciplines) + MAX_BUTTONS_PER_PAGE - 1) // MAX_BUTTONS_PER_PAGE
        disciplines_page = disciplines[page*MAX_BUTTONS_PER_PAGE:(page+1)*MAX_BUTTONS_PER_PAGE]
        
        markup = types.InlineKeyboardMarkup()
        
        for disc in disciplines_page:
            markup.add(types.InlineKeyboardButton(
                text=disc[1],
                callback_data=f"show_tasks:{disc[0]}"
            ))
        
        if total_pages > 1:
            nav_buttons = []
            if page > 0:
                nav_buttons.append(types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"tasks_disc_page:{page-1}"
                ))
            if page < total_pages - 1:
                nav_buttons.append(types.InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                    callback_data=f"tasks_disc_page:{page+1}"
                ))
            markup.row(*nav_buttons)
        
        markup.add(types.InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_tasks_view"
        ))
        
        try:
            if hasattr(message, 'message_id'):
                bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    text="üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏–π:" + 
                         (f" (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})" if total_pages > 1 else ""),
                    reply_markup=markup
                )
            else:
                bot.send_message(
                    user_id,
                    "üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏–π:" + 
                    (f" (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})" if total_pages > 1 else ""),
                    reply_markup=markup
                )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            bot.send_message(
                user_id,
                "üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏–π:" + 
                (f" (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})" if total_pages > 1 else ""),
                reply_markup=markup
            )
            
    except Exception as e:
        logger.error(f"Error in show_disciplines_for_tasks: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                        reply_markup=main_menu(message.from_user.id))

def process_new_discipline(message):
    try:
        user_id = message.from_user.id
        discipline_name = message.text.strip()
        
        if not discipline_name:
            bot.send_message(user_id, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            msg = bot.send_message(
                user_id,
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            bot.register_next_step_handler(msg, process_new_discipline)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        cursor.execute("SELECT id FROM disciplines WHERE name = ?", (discipline_name,))
        if cursor.fetchone() is not None:
            bot.send_message(
                user_id,
                f"‚ö†Ô∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{discipline_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                reply_markup=admin_panel(user_id)
            )
            return
        
        try:
            cursor.execute("INSERT INTO disciplines (name) VALUES (?)", (discipline_name,))
            conn.commit()
            bot.send_message(
                user_id,
                f"‚úÖ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ '{discipline_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                reply_markup=admin_panel(user_id)
            )
        except sqlite3.IntegrityError:
            bot.send_message(
                user_id,
                f"‚ö†Ô∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{discipline_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                reply_markup=admin_panel(user_id)
            )
    except Exception as e:
        logger.error(f"Error in process_new_discipline: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                        reply_markup=admin_panel(message.from_user.id))

@bot.message_handler(func=lambda message: message.text == "üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π")
def handle_show_tasks(message):
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
        show_disciplines_for_task_selection(message.from_user.id)
    except Exception as e:
        logger.error(f"Error in handle_show_tasks: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def show_disciplines_for_task_selection(user_id, page=0):
    try:
        cursor.execute("SELECT id, name FROM disciplines ORDER BY name")
        disciplines = cursor.fetchall()
        
        if not disciplines:
            bot.send_message(user_id, "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.", reply_markup=main_menu(user_id))
            return
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        total_pages = (len(disciplines) + MAX_BUTTONS_PER_PAGE - 1) // MAX_BUTTONS_PER_PAGE
        disciplines_page = disciplines[page*MAX_BUTTONS_PER_PAGE:(page+1)*MAX_BUTTONS_PER_PAGE]
        
        markup = types.InlineKeyboardMarkup()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
        for disc_id, disc_name in disciplines_page:
            markup.add(types.InlineKeyboardButton(
                text=disc_name,
                callback_data=f"show_disc_tasks:{disc_id}:0"  # 0 - –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        if total_pages > 1:
            row = []
            if page > 0:
                row.append(types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"disc_page:{page-1}"
                ))
            if page < total_pages - 1:
                row.append(types.InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                    callback_data=f"disc_page:{page+1}"
                ))
            markup.row(*row)
        
        markup.add(types.InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_tasks_view"
        ))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            user_id,
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏–π:" + 
            (f" (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})" if total_pages > 1 else ""),
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"Error in show_disciplines_for_task_selection: {e}")
        bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_disc_tasks:'))
def show_tasks_for_discipline(call):
    try:
        user_id = call.from_user.id
        data_parts = call.data.split(':')
        discipline_id = int(data_parts[1])
        page = int(data_parts[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
        cursor.execute("SELECT name FROM disciplines WHERE id = ?", (discipline_id,))
        discipline_name = cursor.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        cursor.execute('''
            SELECT id, name, deadline 
            FROM tasks 
            WHERE discipline_id = ?
            ORDER BY deadline
            LIMIT ? OFFSET ?
        ''', (discipline_id, MAX_BUTTONS_PER_PAGE, page*MAX_BUTTONS_PER_PAGE))
        tasks = cursor.fetchall()
        
        cursor.execute("SELECT COUNT(*) FROM tasks WHERE discipline_id = ?", (discipline_id,))
        total_tasks = cursor.fetchone()[0]
        total_pages = (total_tasks + MAX_BUTTONS_PER_PAGE - 1) // MAX_BUTTONS_PER_PAGE
        
        markup = types.InlineKeyboardMarkup()
        
        if not tasks:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"üì≠ –í –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{discipline_name}' –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.",
                reply_markup=markup.add(
                    types.InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥ –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º",
                        callback_data="back_to_disc_list"
                    )
                )
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞–¥–∞–Ω–∏–π
        for task_id, task_name, deadline in tasks:
            markup.add(types.InlineKeyboardButton(
                text=f"{task_name} (–¥–æ {deadline})",
                callback_data=f"view_task:{task_id}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        if total_pages > 1:
            nav_row = []
            if page > 0:
                nav_row.append(types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"show_disc_tasks:{discipline_id}:{page-1}"
                ))
            if page < total_pages - 1:
                nav_row.append(types.InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=f"show_disc_tasks:{discipline_id}:{page+1}"
                ))
            markup.row(*nav_row)
        
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º",
            callback_data="back_to_disc_list"
        ))
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üìå –ó–∞–¥–∞–Ω–∏—è –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{discipline_name}':\n(–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"Error in show_tasks_for_discipline: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data == 'back_to_disc_list')
def handle_back_to_disciplines(call):
    try:
        show_disciplines_for_task_selection(call.from_user.id)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in handle_back_to_disciplines: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('view_task:'))
def view_task_details(call):
    try:
        user_id = call.from_user.id
        task_id = int(call.data.split(':')[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
        cursor.execute('''
            SELECT t.name, t.description, t.deadline, d.name 
            FROM tasks t
            JOIN disciplines d ON t.discipline_id = d.id
            WHERE t.id = ?
        ''', (task_id,))
        task = cursor.fetchone()
        
        if not task:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        task_name, description, deadline, discipline_name = task
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
        cursor.execute("SELECT file_id FROM photos WHERE task_id = ?", (task_id,))
        photos = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
        cursor.execute("SELECT text FROM solutions WHERE task_id = ?", (task_id,))
        solution = cursor.fetchone()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞–Ω–∏–∏
        response = f"üìå <b>{task_name}</b>\n"
        response += f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {discipline_name}\n"
        response += f"üìÖ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {deadline}\n\n"
        response += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}\n\n"
        
        if solution:
            response += f"üìù –†–µ—à–µ–Ω–∏–µ:\n{solution[0]}\n\n"
        
        if photos:
            response += f"üñº –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.InlineKeyboardMarkup()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if photos:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=response,
                reply_markup=markup,
                parse_mode='HTML'
            )
            
            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
            send_photo_with_navigation(
                chat_id=call.message.chat.id,
                message_id=None,  # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                photos=photos,
                current_index=0,
                task_id=task_id
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
            markup.add(types.InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º",
                callback_data=f"back_to_tasks:{discipline_name}"
            ))
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=response,
                reply_markup=markup,
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(f"Error in view_task_details: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(call.from_user.id))

def send_photo_with_navigation(chat_id, message_id, photos, current_index, task_id):
    try:
        markup = types.InlineKeyboardMarkup()
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if len(photos) > 1:
            row_buttons = []
            if current_index > 0:
                row_buttons.append(types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"photo_nav:{task_id}:{current_index-1}"
                ))
            if current_index < len(photos) - 1:
                row_buttons.append(types.InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                    callback_data=f"photo_nav:{task_id}:{current_index+1}"
                ))
            markup.row(*row_buttons)
        
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—é",
            callback_data=f"back_to_task:{task_id}"
        ))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        if message_id:
            bot.edit_message_media(
                chat_id=chat_id,
                message_id=message_id,
                media=types.InputMediaPhoto(
                    photos[current_index][0],
                    caption=f"üñº –§–æ—Ç–æ {current_index+1} –∏–∑ {len(photos)}"
                ),
                reply_markup=markup
            )
        else:
            bot.send_photo(
                chat_id=chat_id,
                photo=photos[current_index][0],
                caption=f"üñº –§–æ—Ç–æ {current_index+1} –∏–∑ {len(photos)}",
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in send_photo_with_navigation: {e}")
        raise

@bot.callback_query_handler(func=lambda call: call.data.startswith('photo_nav:'))
def handle_photo_navigation(call):
    try:
        _, task_id, photo_index = call.data.split(':')
        task_id = int(task_id)
        photo_index = int(photo_index)
        
        cursor.execute("SELECT file_id FROM photos WHERE task_id = ?", (task_id,))
        photos = cursor.fetchall()
        
        if not photos:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            return
        
        if photo_index < 0 or photo_index >= len(photos):
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞")
            return
        
        send_photo_with_navigation(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            photos=photos,
            current_index=photo_index,
            task_id=task_id
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in handle_photo_navigation: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(call.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('back_to_task:'))
def handle_back_to_task(call):
    try:
        task_id = int(call.data.split(':')[1])
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        try:
            bot.delete_message(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id
            )
        except:
            pass
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π callback –¥–ª—è –≤—ã–∑–æ–≤–∞ view_task_details
        class FakeCall:
            def __init__(self):
                self.message = call.message
                self.data = f'view_task:{task_id}'
                self.from_user = call.from_user
        
        view_task_details(FakeCall())
        
    except Exception as e:
        logger.error(f"Error in handle_back_to_task: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(call.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('back_to_tasks_from:'))
def handle_back_to_tasks(call):
    try:
        task_id = int(call.data.split(':')[1])
        
        # –ü–æ–ª—É—á–∞–µ–º discipline_id –∏–∑ –∑–∞–¥–∞–Ω–∏—è
        cursor.execute("SELECT discipline_id FROM tasks WHERE id = ?", (task_id,))
        discipline_id = cursor.fetchone()[0]
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –≥–¥–µ –±—ã–ª–æ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
        cursor.execute("""
            SELECT COUNT(*) FROM tasks 
            WHERE discipline_id = ? AND deadline <= 
                (SELECT deadline FROM tasks WHERE id = ?)
        """, (discipline_id, task_id))
        position = cursor.fetchone()[0]
        page = (position - 1) // MAX_BUTTONS_PER_PAGE
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π
        fake_call = type('FakeCall', (), {
            'message': call.message,
            'data': f'show_disc_tasks:{discipline_id}:{page}',
            'from_user': call.from_user
        })
        show_tasks_for_discipline(fake_call)
        
    except Exception as e:
        logger.error(f"Error in handle_back_to_tasks: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π.")

def show_disciplines_for_tasks(message, page=0):
    try:
        user_id = message.from_user.id
        cursor.execute("SELECT id, name FROM disciplines ORDER BY name")
        disciplines = cursor.fetchall()
        
        if not disciplines:
            bot.send_message(user_id, "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.", reply_markup=main_menu(user_id))
            return
        
        total_pages = (len(disciplines) + MAX_BUTTONS_PER_PAGE - 1) // MAX_BUTTONS_PER_PAGE
        disciplines_page = disciplines[page*MAX_BUTTONS_PER_PAGE:(page+1)*MAX_BUTTONS_PER_PAGE]
        
        markup = types.InlineKeyboardMarkup()
        
        for disc in disciplines_page:
            markup.add(types.InlineKeyboardButton(
                text=disc[1],
                callback_data=f"show_tasks:{disc[0]}"
            ))
        
        if total_pages > 1:
            nav_buttons = []
            if page > 0:
                nav_buttons.append(types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"tasks_disc_page:{page-1}"
                ))
            if page < total_pages - 1:
                nav_buttons.append(types.InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                    callback_data=f"tasks_disc_page:{page+1}"
                ))
            markup.row(*nav_buttons)
        
        markup.add(types.InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_tasks_view"
        ))
        
        try:
            if hasattr(message, 'message_id'):
                try:
                    bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=message.message_id,
                        text="üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏–π:" + 
                             (f" (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})" if total_pages > 1 else ""),
                        reply_markup=markup
                    )
                except:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    bot.send_message(
                        user_id,
                        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏–π:" + 
                        (f" (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})" if total_pages > 1 else ""),
                        reply_markup=markup
                    )
            else:
                bot.send_message(
                    user_id,
                    "üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏–π:" + 
                    (f" (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})" if total_pages > 1 else ""),
                    reply_markup=markup
                )
        except Exception as e:
            logger.error(f"Error sending disciplines list: {e}")
            bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.")
            
    except Exception as e:
        logger.error(f"Error in show_disciplines_for_tasks: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                        reply_markup=main_menu(message.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_tasks:'))
def show_tasks_for_discipline(call):
    try:
        user_id = call.from_user.id
        discipline_id = int(call.data.split(':')[1])
        
        cursor.execute("SELECT name FROM disciplines WHERE id = ?", (discipline_id,))
        discipline_name = cursor.fetchone()[0]
        
        cursor.execute('''
            SELECT t.id, t.name, t.description, t.deadline 
            FROM tasks t 
            WHERE t.discipline_id = ?
            ORDER BY t.deadline
        ''', (discipline_id,))
        tasks = cursor.fetchall()
        
        if not tasks:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"üì≠ –í –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{discipline_name}' –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="back_to_disciplines"
                    )
                )
            )
            return
        
        response = f"üìö –ó–∞–¥–∞–Ω–∏—è –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{discipline_name}':\n\n"
        markup = types.InlineKeyboardMarkup()
        
        for task in tasks:
            task_id, task_name, description, deadline = task
            response += f"üìå {task_name} (–¥–æ {deadline})\n"
            markup.add(types.InlineKeyboardButton(
                text=f"‚ÑπÔ∏è {task_name}",
                callback_data=f"view_task:{task_id}"
            ))
        
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_disciplines"
        ))
        
        try:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=response,
                reply_markup=markup
            )
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            bot.send_message(
                user_id,
                response,
                reply_markup=markup
            )
        
    except Exception as e:
        logger.error(f"Error in show_tasks_for_discipline: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                        reply_markup=main_menu(call.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data == 'back_to_disciplines')
def handle_back_to_disciplines(call):
    try:
        show_disciplines_for_tasks(call.message)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in handle_back_to_disciplines: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def handle_help(message):
    try:
        help_text = """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
- –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
-----–ë–æ—Ç –≤ —Ç–µ—Å—Ç–µ-----
–ï—Å–ª–∏ –Ω–∞—à–ª–∏ –±–∞–≥/–±–∞–≥–∏ –ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É 
@sunflowerghoat
"""
        bot.send_message(message.chat.id, help_text, reply_markup=main_menu(message.from_user.id))
    except Exception as e:
        logger.error(f"Error in handle_help: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
def handle_back_to_menu(message):
    try:
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(message.from_user.id))
    except Exception as e:
        logger.error(f"Error in handle_back_to_menu: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ================ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ ================

def show_disciplines_for_selection(message, page=0):
    try:
        user_id = message.from_user.id
        cursor.execute("SELECT id, name FROM disciplines ORDER BY name")
        disciplines = cursor.fetchall()
        
        if not disciplines:
            bot.send_message(user_id, "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.", reply_markup=main_menu(user_id))
            return
        
        total_pages = (len(disciplines) + MAX_BUTTONS_PER_PAGE - 1) // MAX_BUTTONS_PER_PAGE
        disciplines_page = disciplines[page*MAX_BUTTONS_PER_PAGE:(page+1)*MAX_BUTTONS_PER_PAGE]
        
        markup = types.InlineKeyboardMarkup()
        
        for disc in disciplines_page:
            markup.add(types.InlineKeyboardButton(
                text=disc[1],
                callback_data=f"select_disc:{disc[0]}"
            ))
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        if total_pages > 1:
            nav_buttons = []
            if page > 0:
                nav_buttons.append(types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"disc_page:{page-1}"
                ))
            if page < total_pages - 1:
                nav_buttons.append(types.InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                    callback_data=f"disc_page:{page+1}"
                ))
            markup.row(*nav_buttons)
        
        markup.add(types.InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel"
        ))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if hasattr(message, 'message_id'):
            try:
                bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    text="üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:" + (f" (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})" if total_pages > 1 else ""),
                    reply_markup=markup
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.send_message(
                    user_id,
                    "üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:" + (f" (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})" if total_pages > 1 else ""),
                    reply_markup=markup
                )
        else:
            bot.send_message(
                user_id,
                "üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:" + (f" (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})" if total_pages > 1 else ""),
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in show_disciplines_for_selection: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(message.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('select_disc:'))
def process_task_discipline(call):
    try:
        user_id = call.from_user.id
        discipline_id = int(call.data.split(':')[1])
        
        cursor.execute("SELECT name FROM disciplines WHERE id = ?", (discipline_id,))
        discipline_name = cursor.fetchone()[0]
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üìö –í—ã–±—Ä–∞–Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {discipline_name}"
        )
        
        msg = bot.send_message(user_id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=types.ReplyKeyboardRemove())
        user_state.set_state(user_id, 'waiting_for_task_name', {'discipline_id': discipline_id})
        bot.register_next_step_handler(msg, process_task_name)
    except Exception as e:
        logger.error(f"Error in process_task_discipline: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(call.from_user.id))

def process_task_name(message):
    try:
        user_id = message.from_user.id
        state = user_state.get_state(user_id)
        
        if message.text.lower() == "–Ω–∞–∑–∞–¥":
            show_disciplines_for_selection(message)
            return
        
        task_name = message.text
        state['data']['task_name'] = task_name
        user_state.set_state(user_id, 'waiting_for_task_description', state['data'])
        
        msg = bot.send_message(user_id, "üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, process_task_description)
    except Exception as e:
        logger.error(f"Error in process_task_name: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(message.from_user.id))

def process_task_description(message):
    try:
        user_id = message.from_user.id
        state = user_state.get_state(user_id)
        
        if message.text.lower() == "–Ω–∞–∑–∞–¥":
            msg = bot.send_message(user_id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=types.ReplyKeyboardRemove())
            user_state.set_state(user_id, 'waiting_for_task_name', {'discipline_id': state['data']['discipline_id']})
            bot.register_next_step_handler(msg, process_task_name)
            return
        
        task_description = message.text
        state['data']['task_description'] = task_description
        user_state.set_state(user_id, 'waiting_for_task_deadline', state['data'])
        
        msg = bot.send_message(user_id, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, process_task_deadline)
    except Exception as e:
        logger.error(f"Error in process_task_description: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(message.from_user.id))

def process_task_deadline(message):
    try:
        user_id = message.from_user.id
        state = user_state.get_state(user_id)
        
        if message.text.lower() == "–Ω–∞–∑–∞–¥":
            msg = bot.send_message(user_id, "üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=types.ReplyKeyboardRemove())
            user_state.set_state(user_id, 'waiting_for_task_description', {
                'discipline_id': state['data']['discipline_id'],
                'task_name': state['data']['task_name']
            })
            bot.register_next_step_handler(msg, process_task_description)
            return
        
        deadline = message.text
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            datetime.strptime(deadline, "%d.%m.%Y")
        except ValueError:
            msg = bot.send_message(user_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: 31.12.2023")
            bot.register_next_step_handler(msg, process_task_deadline)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –ë–î
        cursor.execute(
            "INSERT INTO tasks (discipline_id, name, description, deadline, added_by) VALUES (?, ?, ?, ?, ?)",
            (state['data']['discipline_id'], state['data']['task_name'], 
             state['data']['task_description'], deadline, user_id)
        )
        conn.commit()
        task_id = cursor.lastrowid
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("‚úÖ –î–∞", "‚ùå –ù–µ—Ç")
        
        msg = bot.send_message(
            user_id,
            "üñº –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ –∑–∞–¥–∞–Ω–∏—é?",
            reply_markup=markup
        )
        
        state['data']['task_id'] = task_id
        user_state.set_state(user_id, 'waiting_for_photo_decision', state['data'])
        bot.register_next_step_handler(msg, process_photo_decision)
    except Exception as e:
        logger.error(f"Error in process_task_deadline: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(message.from_user.id))

def process_photo_decision(message):
    try:
        user_id = message.from_user.id
        state = user_state.get_state(user_id)
        task_id = state['data']['task_id']
        
        if message.text.lower() in ["–Ω–µ—Ç", "‚ùå –Ω–µ—Ç"]:
            ask_for_solution(user_id, task_id)
            return
        
        if message.text.lower() in ["–¥–∞", "‚úÖ –¥–∞"]:
            msg = bot.send_message(
                user_id,
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
                reply_markup=types.ReplyKeyboardRemove()
            )
            user_state.set_state(user_id, 'waiting_for_task_photos', state['data'])
            bot.register_next_step_handler(msg, process_task_photos)
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
            msg = bot.send_message(user_id, "üñº –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ –∑–∞–¥–∞–Ω–∏—é?", reply_markup=main_menu(user_id))
            bot.register_next_step_handler(msg, process_photo_decision)
    except Exception as e:
        logger.error(f"Error in process_photo_decision: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(message.from_user.id))

@bot.message_handler(content_types=['photo'])
def process_task_photos(message):
    try:
        user_id = message.from_user.id
        state = user_state.get_state(user_id)
        
        if state.get('state') != 'waiting_for_task_photos':
            return
            
        task_id = state['data']['task_id']
        file_id = message.photo[-1].file_id
        
        cursor.execute(
            "INSERT INTO photos (task_id, file_id) VALUES (?, ?)",
            (task_id, file_id)
        )
        conn.commit()
        
        # –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("‚úÖ –ì–æ—Ç–æ–≤–æ", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ")
        
        msg = bot.send_message(
            user_id,
            "üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=markup
        )
        
        user_state.set_state(user_id, 'waiting_for_more_photos', state['data'])
        bot.register_next_step_handler(msg, process_more_photos)
    except Exception as e:
        logger.error(f"Error in process_task_photos: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(message.from_user.id))

def process_more_photos(message):
    try:
        user_id = message.from_user.id
        state = user_state.get_state(user_id)
        task_id = state['data']['task_id']
        
        if message.text.lower() in ["–≥–æ—Ç–æ–≤–æ", "‚úÖ –≥–æ—Ç–æ–≤–æ"]:
            ask_for_solution(user_id, task_id)
            return
        
        if message.text.lower() in ["–¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ", "‚ûï –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ"]:
            msg = bot.send_message(
                user_id,
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            user_state.set_state(user_id, 'waiting_for_task_photos', state['data'])
            bot.register_next_step_handler(msg, process_task_photos)
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
            msg = bot.send_message(user_id, "üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_menu(user_id))
            bot.register_next_step_handler(msg, process_more_photos)
    except Exception as e:
        logger.error(f"Error in process_more_photos: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(message.from_user.id))

def ask_for_solution(user_id, task_id):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add("‚úÖ –î–∞", "‚ùå –ù–µ—Ç")
        
        msg = bot.send_message(
            user_id,
            "üìù –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∫ –∑–∞–¥–∞–Ω–∏—é?",
            reply_markup=markup
        )
        
        user_state.set_state(user_id, 'waiting_for_solution_decision', {'task_id': task_id})
        bot.register_next_step_handler(msg, process_solution_decision)
    except Exception as e:
        logger.error(f"Error in ask_for_solution: {e}")
        bot.send_message(user_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(user_id))

def process_solution_decision(message):
    try:
        user_id = message.from_user.id
        state = user_state.get_state(user_id)
        task_id = state['data']['task_id']
        
        if message.text.lower() in ["–Ω–µ—Ç", "‚ùå –Ω–µ—Ç"]:
            bot.send_message(
                user_id,
                "‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
                reply_markup=main_menu(user_id)
            )
            user_state.clear_state(user_id)
            return
        
        if message.text.lower() in ["–¥–∞", "‚úÖ –¥–∞"]:
            msg = bot.send_message(
                user_id,
                "üìù –í–≤–µ–¥–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            user_state.set_state(user_id, 'waiting_for_solution_text', {'task_id': task_id})
            bot.register_next_step_handler(msg, process_task_solution)
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
            msg = bot.send_message(user_id, "üìù –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∫ –∑–∞–¥–∞–Ω–∏—é?", reply_markup=main_menu(user_id))
            bot.register_next_step_handler(msg, process_solution_decision)
    except Exception as e:
        logger.error(f"Error in process_solution_decision: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(message.from_user.id))

def process_task_solution(message):
    try:
        user_id = message.from_user.id
        state = user_state.get_state(user_id)
        task_id = state['data']['task_id']
        
        solution_text = message.text
        cursor.execute(
            "INSERT INTO solutions (task_id, text, added_by) VALUES (?, ?, ?)",
            (task_id, solution_text, user_id)
        )
        conn.commit()
        
        bot.send_message(
            user_id,
            "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –∏ —Ä–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
            reply_markup=main_menu(user_id)
        )
        user_state.clear_state(user_id)
    except Exception as e:
        logger.error(f"Error in process_task_solution: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(message.from_user.id))

# ================ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –∏ –∑–∞–¥–∞–Ω–∏–π ================

def show_disciplines_for_tasks(message, page=0):
    try:
        user_id = message.from_user.id
        cursor.execute("SELECT id, name FROM disciplines ORDER BY name")
        disciplines = cursor.fetchall()
        
        if not disciplines:
            bot.send_message(user_id, "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.", reply_markup=main_menu(user_id))
            return
        
        total_pages = (len(disciplines) + MAX_BUTTONS_PER_PAGE - 1) // MAX_BUTTONS_PER_PAGE
        disciplines_page = disciplines[page*MAX_BUTTONS_PER_PAGE:(page+1)*MAX_BUTTONS_PER_PAGE]
        
        markup = types.InlineKeyboardMarkup()
        
        for disc in disciplines_page:
            markup.add(types.InlineKeyboardButton(
                text=disc[1],
                callback_data=f"show_tasks:{disc[0]}"
            ))
        
        if total_pages > 1:
            nav_buttons = []
            if page > 0:
                nav_buttons.append(types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"tasks_disc_page:{page-1}"
                ))
            if page < total_pages - 1:
                nav_buttons.append(types.InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                    callback_data=f"tasks_disc_page:{page+1}"
                ))
            markup.row(*nav_buttons)
        
        markup.add(types.InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_tasks_view"
        ))
        
        if hasattr(message, 'message_id'):
            bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=message.message_id,
                text="üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏–π:" + (f" (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})" if total_pages > 1 else ""),
                reply_markup=markup
            )
        else:
            bot.send_message(
                user_id,
                "üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏–π:" + (f" (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})" if total_pages > 1 else ""),
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in show_disciplines_for_tasks: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(message.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_tasks:'))
def show_tasks_for_discipline(call):
    try:
        user_id = call.from_user.id
        discipline_id = int(call.data.split(':')[1])
        
        cursor.execute("SELECT name FROM disciplines WHERE id = ?", (discipline_id,))
        discipline_name = cursor.fetchone()[0]
        
        cursor.execute('''
            SELECT t.id, t.name, t.description, t.deadline 
            FROM tasks t 
            WHERE t.discipline_id = ?
            ORDER BY t.deadline
        ''', (discipline_id,))
        tasks = cursor.fetchall()
        
        if not tasks:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"üì≠ –í –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{discipline_name}' –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π."
            )
            return
        
        markup = types.InlineKeyboardMarkup()
        
        for task in tasks:
            markup.add(types.InlineKeyboardButton(
                text=f"üìå {task[1]} (–¥–æ {task[3]})",
                callback_data=f"view_task:{task[0]}"
            ))
        
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_disciplines"
        ))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üìö –ó–∞–¥–∞–Ω–∏—è –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{discipline_name}':",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error in show_tasks_for_discipline: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(call.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('view_task:'))
def view_task_details(call):
    try:
        user_id = call.from_user.id
        task_id = int(call.data.split(':')[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
        cursor.execute('''
            SELECT t.name, t.description, t.deadline, d.name 
            FROM tasks t
            JOIN disciplines d ON t.discipline_id = d.id
            WHERE t.id = ?
        ''', (task_id,))
        task = cursor.fetchone()
        
        if not task:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        task_name, description, deadline, discipline_name = task
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
        cursor.execute("SELECT file_id FROM photos WHERE task_id = ?", (task_id,))
        photos = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
        cursor.execute("SELECT text FROM solutions WHERE task_id = ?", (task_id,))
        solution = cursor.fetchone()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞–Ω–∏–∏
        response = f"üìå <b>{task_name}</b>\n"
        response += f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {discipline_name}\n"
        response += f"üìÖ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {deadline}\n\n"
        response += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}\n\n"
        
        if solution:
            response += f"üìù –†–µ—à–µ–Ω–∏–µ:\n{solution[0]}\n\n"
        
        if photos:
            response += f"üñº –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.InlineKeyboardMarkup()
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if photos:
            markup.add(types.InlineKeyboardButton(
                text="üñº –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
                callback_data=f"view_photos:{task_id}"
            ))
        
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º",
            callback_data=f"back_to_tasks:{discipline_name}"
        ))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=response,
            reply_markup=markup,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error in view_task_details: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(call.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('view_task:'))
def view_task_details(call):
    try:
        user_id = call.from_user.id
        task_id = int(call.data.split(':')[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
        cursor.execute('''
            SELECT t.name, t.description, t.deadline, d.name 
            FROM tasks t
            JOIN disciplines d ON t.discipline_id = d.id
            WHERE t.id = ?
        ''', (task_id,))
        task = cursor.fetchone()
        
        if not task:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        task_name, description, deadline, discipline_name = task
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
        cursor.execute("SELECT file_id FROM photos WHERE task_id = ?", (task_id,))
        photos = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
        cursor.execute("SELECT text FROM solutions WHERE task_id = ?", (task_id,))
        solution = cursor.fetchone()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞–Ω–∏–∏
        response = f"üìå <b>{task_name}</b>\n"
        response += f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {discipline_name}\n"
        response += f"üìÖ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {deadline}\n\n"
        response += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}\n\n"
        
        if solution:
            response += f"üìù –†–µ—à–µ–Ω–∏–µ:\n{solution[0]}\n\n"
        
        if photos:
            response += f"üñº –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.InlineKeyboardMarkup()
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if photos:
            markup.add(types.InlineKeyboardButton(
                text="üñº –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
                callback_data=f"view_photos:{task_id}:0"  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            ))
        
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º",
            callback_data=f"back_to_tasks:{discipline_name}"
        ))
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=response,
            reply_markup=markup,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error in view_task_details: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(call.from_user.id))

def send_photo_with_navigation(chat_id, message_id, photos, current_index, task_id):
    try:
        markup = types.InlineKeyboardMarkup()
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if len(photos) > 1:
            row_buttons = []
            if current_index > 0:
                row_buttons.append(types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è",
                    callback_data=f"photo_nav:{task_id}:{current_index-1}"
                ))
            if current_index < len(photos) - 1:
                row_buttons.append(types.InlineKeyboardButton(
                    text="‚û°Ô∏è",
                    callback_data=f"photo_nav:{task_id}:{current_index+1}"
                ))
            markup.row(*row_buttons)
        
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—é",
            callback_data=f"back_to_task:{task_id}"
        ))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        if message_id:
            bot.edit_message_media(
                chat_id=chat_id,
                message_id=message_id,
                media=types.InputMediaPhoto(
                    photos[current_index][0],
                    caption=f"üñº –§–æ—Ç–æ {current_index+1} –∏–∑ {len(photos)}"
                ),
                reply_markup=markup
            )
        else:
            bot.send_photo(
                chat_id=chat_id,
                photo=photos[current_index][0],
                caption=f"üñº –§–æ—Ç–æ {current_index+1} –∏–∑ {len(photos)}",
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in send_photo_with_navigation: {e}")
        raise

@bot.callback_query_handler(func=lambda call: call.data.startswith('photo_nav:'))
def handle_photo_navigation(call):
    try:
        _, task_id, photo_index = call.data.split(':')
        task_id = int(task_id)
        photo_index = int(photo_index)
        
        cursor.execute("SELECT file_id FROM photos WHERE task_id = ?", (task_id,))
        photos = cursor.fetchall()
        
        if not photos:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            return
        
        if photo_index < 0 or photo_index >= len(photos):
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞")
            return
        
        send_photo_with_navigation(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            photos=photos,
            current_index=photo_index,
            task_id=task_id
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in handle_photo_navigation: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(call.from_user.id))

# ================ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ================

@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def handle_cancel(call):
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        )
        bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu(call.from_user.id))
    except Exception as e:
        logger.error(f"Error in handle_cancel: {e}")

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_tasks_view')
def handle_cancel_tasks_view(call):
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ùå –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω."
        )
        bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu(call.from_user.id))
    except Exception as e:
        logger.error(f"Error in handle_cancel_tasks_view: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('disc_page:'))
def handle_disc_page(call):
    try:
        page = int(call.data.split(':')[1])
        show_disciplines_for_selection(call.message, page)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in handle_disc_page: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('tasks_disc_page:'))
def handle_tasks_disc_page(call):
    try:
        page = int(call.data.split(':')[1])
        show_disciplines_for_tasks(call.message, page)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in handle_tasks_disc_page: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data == 'back_to_disciplines')
def handle_back_to_disciplines(call):
    try:
        show_disciplines_for_tasks(call.message)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in handle_back_to_disciplines: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('back_to_tasks:'))
def handle_back_to_tasks(call):
    try:
        discipline_name = call.data.split(':')[1]
        cursor.execute("SELECT id FROM disciplines WHERE name = ?", (discipline_name,))
        discipline_id = cursor.fetchone()[0]
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ show_tasks_for_discipline
        class FakeMessage:
            def __init__(self):
                self.chat = call.message.chat
                self.message_id = call.message.message_id
                self.from_user = call.from_user
        
        fake_call = type('FakeCall', (), {
            'message': FakeMessage(),
            'data': f'show_tasks:{discipline_id}',
            'from_user': call.from_user
        })
        
        show_tasks_for_discipline(fake_call)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in handle_back_to_tasks: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(call.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('back_to_task:'))
def handle_back_to_task(call):
    try:
        task_id = int(call.data.split(':')[1])
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π callback –¥–ª—è –≤—ã–∑–æ–≤–∞ view_task_details
        class FakeMessage:
            def __init__(self):
                self.chat = call.message.chat
                self.message_id = call.message.message_id
                self.from_user = call.from_user
        
        fake_call = type('FakeCall', (), {
            'message': FakeMessage(),
            'data': f'view_task:{task_id}',
            'from_user': call.from_user
        })
        
        view_task_details(fake_call)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in handle_back_to_task: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(call.from_user.id))

# ================ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ================

@bot.message_handler(func=lambda message: message.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
def handle_admin_panel(message):
    try:
        user_id = message.from_user.id
        if is_admin(user_id):
            bot.send_message(user_id, "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel(user_id))
        else:
            bot.send_message(user_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=main_menu(user_id))
    except Exception as e:
        logger.error(f"Error in handle_admin_panel: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: message.text == "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏")
def handle_view_logs(message):
    try:
        user_id = message.from_user.id
        if is_admin(user_id):
            view_logs(message)
        else:
            bot.send_message(user_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=main_menu(user_id))
    except Exception as e:
        logger.error(f"Error in handle_view_logs: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def view_logs(message):
    try:
        user_id = message.from_user.id
        cursor.execute("SELECT * FROM logs ORDER BY timestamp DESC LIMIT 50")
        logs = cursor.fetchall()
        
        if not logs:
            bot.send_message(user_id, "üì≠ –õ–æ–≥–∏ –ø—É—Å—Ç—ã.")
            return
        
        response = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –¥–µ–π—Å—Ç–≤–∏–π:\n\n"
        for log in logs:
            log_id, log_user_id, action, timestamp = log
            cursor.execute("SELECT username FROM users WHERE user_id = ?", (log_user_id,))
            user = cursor.fetchone()
            username = user[0] if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            response += f"‚è∞ {timestamp}\nüë§ {username} (ID: {log_user_id})\nüîπ {action}\n\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        for i in range(0, len(response), 4000):
            bot.send_message(user_id, response[i:i+4000])
    except Exception as e:
        logger.error(f"Error in view_logs: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(message.from_user.id))

@bot.message_handler(func=lambda message: message.text == "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def handle_user_stats(message):
    try:
        user_id = message.from_user.id
        if is_admin(user_id):
            view_user_stats(message)
        else:
            bot.send_message(user_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=main_menu(user_id))
    except Exception as e:
        logger.error(f"Error in handle_user_stats: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def view_user_stats(message):
    try:
        user_id = message.from_user.id
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]

        cursor.execute("SELECT user_id, COUNT(*) FROM logs GROUP BY user_id ORDER BY COUNT(*) DESC LIMIT 10")
        active_users = cursor.fetchall()

        response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        response += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
        response += "üèÜ –¢–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"

        for i, (user_id, count) in enumerate(active_users, 1):
            cursor.execute("SELECT username, first_name, last_name FROM users WHERE user_id = ?", (user_id,))
            user = cursor.fetchone()
            if user:
                username, first_name, last_name = user
                name = f"{first_name} {last_name}" if last_name else first_name
                response += f"{i}. {name} (@{username if username else '–Ω–µ—Ç'}) - {count} –¥–µ–π—Å—Ç–≤–∏–π\n"
            else:
                response += f"{i}. ID: {user_id} - {count} –¥–µ–π—Å—Ç–≤–∏–π\n"

        bot.send_message(message.chat.id, response)
    except Exception as e:
        logger.error(f"Error in view_user_stats: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(message.from_user.id))

@bot.message_handler(func=lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def handle_view_all_users(message):
    try:
        user_id = message.from_user.id
        if is_admin(user_id):
            view_all_users(message)
        else:
            bot.send_message(user_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=main_menu(user_id))
    except Exception as e:
        logger.error(f"Error in handle_view_all_users: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def view_all_users(message, page=0):
    try:
        user_id = message.from_user.id
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]

        cursor.execute("""
            SELECT user_id, username, first_name, last_name, join_date 
            FROM users 
            ORDER BY join_date DESC 
            LIMIT ? OFFSET ?
        """, (MAX_BUTTONS_PER_PAGE, page * MAX_BUTTONS_PER_PAGE))
        users = cursor.fetchall()

        if not users:
            bot.send_message(user_id, "üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=admin_panel(user_id))
            return

        total_pages = (total_users + MAX_BUTTONS_PER_PAGE - 1) // MAX_BUTTONS_PER_PAGE

        response = f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages}):\n\n"
        for user in users:
            user_id, username, first_name, last_name, join_date = user
            name = f"{first_name} {last_name}" if last_name else first_name
            response += f"üë§ {name}\n"
            response += f"üÜî ID: {user_id}\n"
            response += f"üìß @{username if username else '–Ω–µ—Ç'}\n"
            response += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {join_date}\n\n"

        markup = types.InlineKeyboardMarkup()
        row_buttons = []
        if page > 0:
            row_buttons.append(types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"users_page:{page-1}"
            ))
        if page < total_pages - 1:
            row_buttons.append(types.InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"users_page:{page+1}"
            ))
        
        if row_buttons:
            markup.row(*row_buttons)
            
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_admin_panel"
        ))

        if hasattr(message, 'message_id'):
            try:
                bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    text=response,
                    reply_markup=markup
                )
            except:
                bot.send_message(user_id, response, reply_markup=markup)
        else:
            bot.send_message(user_id, response, reply_markup=markup)
            
    except Exception as e:
        logger.error(f"Error in view_all_users: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(message.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data == 'close_users_list')
def handle_close_users_list(call):
    try:
        bot.delete_message(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in handle_close_users_list: {e}")

@bot.message_handler(func=lambda message: message.text == "üìå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏")
def handle_manage_tasks(message):
    try:
        user_id = message.from_user.id
        if is_admin(user_id):
            manage_tasks(message)
        else:
            bot.send_message(user_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=main_menu(user_id))
    except Exception as e:
        logger.error(f"Error in handle_manage_tasks: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def manage_tasks(message, page=0):
    try:
        user_id = message.from_user.id
        cursor.execute("SELECT id, name FROM disciplines")
        disciplines = cursor.fetchall()

        if not disciplines:
            bot.send_message(user_id, "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.", reply_markup=admin_panel(user_id))
            return

        total_pages = (len(disciplines) + MAX_BUTTONS_PER_PAGE - 1) // MAX_BUTTONS_PER_PAGE
        disciplines_page = disciplines[page*MAX_BUTTONS_PER_PAGE:(page+1)*MAX_BUTTONS_PER_PAGE]

        markup = types.InlineKeyboardMarkup()

        for disc in disciplines_page:
            markup.add(types.InlineKeyboardButton(
                text=f"üìå {disc[1]}",
                callback_data=f"manage_disc_tasks:{disc[0]}"
            ))

        if total_pages > 1:
            nav_buttons = []
            if page > 0:
                nav_buttons.append(types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"manage_tasks_page:{page-1}"
                ))
            if page < total_pages - 1:
                nav_buttons.append(types.InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                    callback_data=f"manage_tasks_page:{page+1}"
                ))
            markup.row(*nav_buttons)

        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_admin_panel"
        ))

        if hasattr(message, 'message_id'):
            try:
                bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    text="üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏:" + (f" (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})" if total_pages > 1 else ""),
                    reply_markup=markup
                )
            except:
                bot.send_message(
                    user_id,
                    "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏:" + (f" (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})" if total_pages > 1 else ""),
                    reply_markup=markup
                )
        else:
            bot.send_message(
                user_id,
                "üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏:" + (f" (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})" if total_pages > 1 else ""),
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in manage_tasks: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(message.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('manage_disc_tasks:'))
def show_tasks_management(call):
    try:
        user_id = call.from_user.id
        discipline_id = int(call.data.split(':')[1])

        cursor.execute("SELECT name FROM disciplines WHERE id = ?", (discipline_id,))
        discipline_name = cursor.fetchone()[0]

        cursor.execute("""
            SELECT id, name, deadline 
            FROM tasks 
            WHERE discipline_id = ?
            ORDER BY deadline
        """, (discipline_id,))
        tasks = cursor.fetchall()

        markup = types.InlineKeyboardMarkup()

        if not tasks:
            markup.add(types.InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="back_to_manage_tasks"
            ))
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"üì≠ –í –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{discipline_name}' –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.",
                reply_markup=markup
            )
            return

        for task in tasks:
            task_id, task_name, deadline = task
            markup.add(types.InlineKeyboardButton(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å: {task_name} (–¥–æ {deadline})",
                callback_data=f"admin_delete_task:{task_id}"
            ))

        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_manage_tasks"
        ))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üìå –ó–∞–¥–∞–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã '{discipline_name}':",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error in show_tasks_management: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(call.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_delete_task:'))
def admin_delete_task(call):
    try:
        user_id = call.from_user.id
        task_id = int(call.data.split(':')[1])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        cursor.execute("""
            SELECT t.name, d.name 
            FROM tasks t
            JOIN disciplines d ON t.discipline_id = d.id
            WHERE t.id = ?
        """, (task_id,))
        task_info = cursor.fetchone()

        if not task_info:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        task_name, discipline_name = task_info

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
            callback_data=f"confirm_delete_task:{task_id}"
        ))
        markup.add(types.InlineKeyboardButton(
            text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞",
            callback_data=f"cancel_delete_task:{task_id}"
        ))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:\n\nüìå {task_name}\nüìö {discipline_name}?",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error in admin_delete_task: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(call.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_task:'))
def confirm_delete_task(call):
    try:
        user_id = call.from_user.id
        task_id = int(call.data.split(':')[1])

        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ñ–æ—Ç–æ –∏ —Ä–µ—à–µ–Ω–∏—è)
        cursor.execute("DELETE FROM photos WHERE task_id = ?", (task_id,))
        cursor.execute("DELETE FROM solutions WHERE task_id = ?", (task_id,))
        cursor.execute("DELETE FROM tasks WHERE id = ?", (task_id,))
        conn.commit()

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!"
        )
    except Exception as e:
        logger.error(f"Error in confirm_delete_task: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.", reply_markup=admin_panel(call.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_delete_task:'))
def cancel_delete_task(call):
    try:
        task_id = int(call.data.split(':')[1])
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π
        cursor.execute("SELECT discipline_id FROM tasks WHERE id = ?", (task_id,))
        discipline_id = cursor.fetchone()[0]
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π callback
        class FakeMessage:
            def __init__(self):
                self.chat = call.message.chat
                self.message_id = call.message.message_id
                self.from_user = call.from_user
        
        fake_call = type('FakeCall', (), {
            'message': FakeMessage(),
            'data': f'manage_disc_tasks:{discipline_id}',
            'from_user': call.from_user
        })
        
        show_tasks_management(fake_call)
    except Exception as e:
        logger.error(f"Error in cancel_delete_task: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(call.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data == 'back_to_manage_tasks')
def handle_back_to_manage_tasks(call):
    try:
        manage_tasks(call.message)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in handle_back_to_manage_tasks: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(call.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data == 'back_to_admin_panel')
def handle_back_to_admin_panel(call):
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=admin_panel(call.from_user.id)
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in handle_back_to_admin_panel: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(call.from_user.id))

@bot.message_handler(func=lambda message: message.text == "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏")
def handle_manage_disciplines(message):
    try:
        user_id = message.from_user.id
        if is_admin(user_id):
            manage_disciplines(message)
        else:
            bot.send_message(user_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=main_menu(user_id))
    except Exception as e:
        logger.error(f"Error in handle_manage_disciplines: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def manage_disciplines(message):
    try:
        user_id = message.from_user.id
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        buttons = [
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É",
            "‚ûñ –£–¥–∞–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É",
            "‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É",
            "üîô –ù–∞–∑–∞–¥"
        ]
        markup.add(*[types.KeyboardButton(btn) for btn in buttons])
        
        bot.send_message(
            user_id,
            "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏:",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error in manage_disciplines: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(message.from_user.id))

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É")
def handle_add_discipline(message):
    try:
        user_id = message.from_user.id
        if is_admin(user_id):
            msg = bot.send_message(
                user_id,
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            user_state.set_state(user_id, 'waiting_for_new_discipline_name')
            bot.register_next_step_handler(msg, process_new_discipline)
        else:
            bot.send_message(user_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=main_menu(user_id))
    except Exception as e:
        logger.error(f"Error in handle_add_discipline: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def process_new_discipline(message):
    try:
        user_id = message.from_user.id
        discipline_name = message.text.strip()
        
        if not discipline_name:
            bot.send_message(user_id, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            msg = bot.send_message(
                user_id,
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            bot.register_next_step_handler(msg, process_new_discipline)
            return
        
        try:
            cursor.execute("INSERT INTO disciplines (name) VALUES (?)", (discipline_name,))
            conn.commit()
            bot.send_message(
                user_id,
                f"‚úÖ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ '{discipline_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                reply_markup=admin_panel(user_id)
            )
        except sqlite3.IntegrityError:
            bot.send_message(
                user_id,
                f"‚ö†Ô∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{discipline_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                reply_markup=admin_panel(user_id)
            )
    except Exception as e:
        logger.error(f"Error in process_new_discipline: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(message.from_user.id))

@bot.message_handler(func=lambda message: message.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É")
def handle_delete_discipline(message):
    try:
        user_id = message.from_user.id
        if is_admin(user_id):
            delete_discipline_step1(message)
        else:
            bot.send_message(user_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=main_menu(user_id))
    except Exception as e:
        logger.error(f"Error in handle_delete_discipline: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def delete_discipline_step1(message, page=0):
    try:
        user_id = message.from_user.id
        cursor.execute("SELECT id, name FROM disciplines")
        disciplines = cursor.fetchall()
        
        if not disciplines:
            bot.send_message(user_id, "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.", reply_markup=admin_panel(user_id))
            return
        
        total_pages = (len(disciplines) + MAX_BUTTONS_PER_PAGE - 1) // MAX_BUTTONS_PER_PAGE
        disciplines_page = disciplines[page*MAX_BUTTONS_PER_PAGE:(page+1)*MAX_BUTTONS_PER_PAGE]
        
        markup = types.InlineKeyboardMarkup()
        
        for disc in disciplines_page:
            markup.add(types.InlineKeyboardButton(
                text=f"‚ùå {disc[1]}",
                callback_data=f"delete_discipline:{disc[0]}"
            ))
        
        if total_pages > 1:
            nav_buttons = []
            if page > 0:
                nav_buttons.append(types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"delete_disc_page:{page-1}"
                ))
            if page < total_pages - 1:
                nav_buttons.append(types.InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                    callback_data=f"delete_disc_page:{page+1}"
                ))
            markup.row(*nav_buttons)
        
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_manage_disciplines"
        ))
        
        bot.send_message(
            user_id,
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:" + (f" (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})" if total_pages > 1 else ""),
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error in delete_discipline_step1: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(message.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_discipline:'))
def delete_discipline_step2(call):
    try:
        user_id = call.from_user.id
        discipline_id = int(call.data.split(':')[1])
        
        cursor.execute("SELECT name FROM disciplines WHERE id = ?", (discipline_id,))
        discipline_name = cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        cursor.execute("SELECT COUNT(*) FROM tasks WHERE discipline_id = ?", (discipline_id,))
        task_count = cursor.fetchone()[0]
        
        if task_count > 0:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(
                text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å —Å –∑–∞–¥–∞–Ω–∏—è–º–∏",
                callback_data=f"confirm_delete_disc_with_tasks:{discipline_id}"
            ))
            markup.add(types.InlineKeyboardButton(
                text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞",
                callback_data=f"cancel_delete_disc:{discipline_id}"
            ))
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"‚ö†Ô∏è –í –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '{discipline_name}' –µ—Å—Ç—å {task_count} –∑–∞–¥–∞–Ω–∏–π. –£–¥–∞–ª–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º–∏?",
                reply_markup=markup
            )
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(
                text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                callback_data=f"confirm_delete_disc:{discipline_id}"
            ))
            markup.add(types.InlineKeyboardButton(
                text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞",
                callback_data=f"cancel_delete_disc:{discipline_id}"
            ))
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É '{discipline_name}'?",
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in delete_discipline_step2: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(call.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_disc:'))
def confirm_delete_discipline(call):
    try:
        discipline_id = int(call.data.split(':')[1])
        
        cursor.execute("DELETE FROM disciplines WHERE id = ?", (discipline_id,))
        conn.commit()
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚úÖ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
        )
    except Exception as e:
        logger.error(f"Error in confirm_delete_discipline: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.", reply_markup=admin_panel(call.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_disc_with_tasks:'))
def confirm_delete_discipline_with_tasks(call):
    try:
        discipline_id = int(call.data.split(':')[1])
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, —Ñ–æ—Ç–æ –∏ —Ä–µ—à–µ–Ω–∏—è
        cursor.execute("SELECT id FROM tasks WHERE discipline_id = ?", (discipline_id,))
        task_ids = [row[0] for row in cursor.fetchall()]
        
        for task_id in task_ids:
            cursor.execute("DELETE FROM photos WHERE task_id = ?", (task_id,))
            cursor.execute("DELETE FROM solutions WHERE task_id = ?", (task_id,))
        
        cursor.execute("DELETE FROM tasks WHERE discipline_id = ?", (discipline_id,))
        cursor.execute("DELETE FROM disciplines WHERE id = ?", (discipline_id,))
        conn.commit()
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚úÖ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!"
        )
    except Exception as e:
        logger.error(f"Error in confirm_delete_discipline_with_tasks: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.", reply_markup=admin_panel(call.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_delete_disc:'))
def cancel_delete_discipline(call):
    try:
        discipline_id = int(call.data.split(':')[1])
        delete_discipline_step1(call.message)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in cancel_delete_discipline: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(call.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_disc_page:'))
def handle_delete_disc_page(call):
    try:
        page = int(call.data.split(':')[1])
        delete_discipline_step1(call.message, page)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in handle_delete_disc_page: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(call.from_user.id))

@bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É")
def handle_rename_discipline(message):
    try:
        user_id = message.from_user.id
        if is_admin(user_id):
            rename_discipline_step1(message)
        else:
            bot.send_message(user_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=main_menu(user_id))
    except Exception as e:
        logger.error(f"Error in handle_rename_discipline: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def rename_discipline_step1(message, page=0):
    try:
        user_id = message.from_user.id
        cursor.execute("SELECT id, name FROM disciplines ORDER BY name")
        disciplines = cursor.fetchall()
        
        if not disciplines:
            bot.send_message(user_id, "üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.", reply_markup=admin_panel(user_id))
            return
        
        total_pages = (len(disciplines) + MAX_BUTTONS_PER_PAGE - 1) // MAX_BUTTONS_PER_PAGE
        disciplines_page = disciplines[page*MAX_BUTTONS_PER_PAGE:(page+1)*MAX_BUTTONS_PER_PAGE]
        
        markup = types.InlineKeyboardMarkup()
        
        for disc in disciplines_page:
            markup.add(types.InlineKeyboardButton(
                text=f"‚úèÔ∏è {disc[1]}",
                callback_data=f"rename_discipline:{disc[0]}"
            ))
        
        if total_pages > 1:
            nav_buttons = []
            if page > 0:
                nav_buttons.append(types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"rename_disc_page:{page-1}"
                ))
            if page < total_pages - 1:
                nav_buttons.append(types.InlineKeyboardButton(
                    text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                    callback_data=f"rename_disc_page:{page+1}"
                ))
            markup.row(*nav_buttons)
        
        markup.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_manage_disciplines"
        ))
        
        bot.send_message(
            user_id,
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:" + (f" (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages})" if total_pages > 1 else ""),
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error in rename_discipline_step1: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(message.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('rename_discipline:'))
def rename_discipline_step2(call):
    try:
        user_id = call.from_user.id
        discipline_id = int(call.data.split(':')[1])
        
        cursor.execute("SELECT name FROM disciplines WHERE id = ?", (discipline_id,))
        discipline_name = cursor.fetchone()[0]
        
        msg = bot.send_message(
            user_id,
            f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã '{discipline_name}':",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        user_state.set_state(user_id, 'waiting_for_new_discipline_name', {'discipline_id': discipline_id})
        bot.register_next_step_handler(msg, process_rename_discipline)
        
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in rename_discipline_step2: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(call.from_user.id))

def process_rename_discipline(message):
    try:
        user_id = message.from_user.id
        state = user_state.get_state(user_id)
        discipline_id = state['data']['discipline_id']
        new_name = message.text.strip()
        
        if not new_name:
            bot.send_message(user_id, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            msg = bot.send_message(
                user_id,
                "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:",
                reply_markup=types.ReplyKeyboardRemove()
            )
            bot.register_next_step_handler(msg, process_rename_discipline)
            return
        
        try:
            cursor.execute("UPDATE disciplines SET name = ? WHERE id = ?", (new_name, discipline_id))
            conn.commit()
            bot.send_message(
                user_id,
                f"‚úÖ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –Ω–∞ '{new_name}'!",
                reply_markup=admin_panel(user_id)
            )
        except sqlite3.IntegrityError:
            bot.send_message(
                user_id,
                f"‚ö†Ô∏è –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{new_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                reply_markup=admin_panel(user_id)
            )
    except Exception as e:
        logger.error(f"Error in process_rename_discipline: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(message.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data.startswith('rename_disc_page:'))
def handle_rename_disc_page(call):
    try:
        page = int(call.data.split(':')[1])
        rename_discipline_step1(call.message, page)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in handle_rename_disc_page: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(call.from_user.id))

@bot.callback_query_handler(func=lambda call: call.data == 'back_to_manage_disciplines')
def handle_back_to_manage_disciplines(call):
    try:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏:",
            reply_markup=None
        )
        manage_disciplines(call.message)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in handle_back_to_manage_disciplines: {e}")
        bot.send_message(call.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=admin_panel(call.from_user.id))

@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def handle_back_to_admin_menu(message):
    try:
        user_id = message.from_user.id
        if is_admin(user_id):
            bot.send_message(user_id, "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel(user_id))
        else:
            bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(user_id))
    except Exception as e:
        logger.error(f"Error in handle_back_to_admin_menu: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ================ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ================

if __name__ == '__main__':
    try:
        initialize_database()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        conn.close()